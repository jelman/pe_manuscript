#   - Cognitive data with nas201tran (age 20 AFQT) regressed out. Scores are    #
#     not standardized.                                                         #
#   - Cognitive data with above adjustment for nas201tran. Scores are           #
#     standardized (z-scored)                                                   #
#     based on VETSA1 means and sd.                                             #
#   - Cognitive data with TEDALL (Education) regressed out. Scores are not      #
#     standardized.                                                             #
#   - Cognitive data with above adjustment for TEDALL. Scores are standardized  #
#     (z-scored) based on VETSA1 means and sd.                                  #
#                                                                               #
#################################################################################
# Import libraries
library(dplyr)
# Load raw test scores and demographics data
allData = read.csv("~/netshare/K/Projects/PracticeEffects/data/raw/V1V2_CogData_Raw.csv",
stringsAsFactors = FALSE)
# Convert all variable names to upper case
names(allData) = toupper(names(allData))
### Log transform timing data ###
# Get names of variables to transform
timeVarsV1 = c("TRL1T","TRL2T","TRL3T","TRL4T","TRL5T","SRTLMEAN","SRTLSTD","SRTRMEAN",
"SRTRSTD","SRTGMEAN","SRTGSTD","CHRTLMEAN","CHRTRMEAN","CHRTLSTD",
"CHRTRSTD","CHRTGMEAN","CHRTGSTD")
timeVarsLogV1 = paste0(timeVarsV1, "LOG")
timeVarsV2 = paste0(timeVarsV1, "_V2")
timeVarsLogV2 = paste0(timeVarsLogV1, "_V2")
# Transform
allData[timeVarsLogV1] = log(allData[timeVarsV1])
allData = dplyr::select(allData, -one_of(timeVarsV1))
allData[timeVarsLogV2] = log(allData[timeVarsV2])
allData = dplyr::select(allData, -one_of(timeVarsV2))
## Adjust variables for processing speed ##
# Stroop interference
lmStroop = lm(STRCWRAW ~ STRWRAW + STRCRAW, data=allData, na.action=na.exclude)
allData[["STRCWADJ"]] = residuals(lmStroop) + coef(lmStroop)[[1]]
lmStroop_V2 = lm(STRCWRAW_V2 ~ STRWRAW_V2 + STRCRAW_V2, data=allData, na.action=na.exclude)
allData[["STRCWADJ_V2"]] = residuals(lmStroop_V2) + coef(lmStroop_V2)[[1]]
# Category Switching
lmCatSwitch = lm(CSSACC ~ CFCOR, data=allData, na.action=na.exclude)
allData[["CSSACCADJ"]] = residuals(lmCatSwitch) + coef(lmCatSwitch)[[1]]
lmCatSwitch_V2 = lm(CSSACC_V2 ~ CFCOR_V2, data=allData, na.action=na.exclude)
allData[["CSSACCADJ_V2"]] = residuals(lmCatSwitch_V2) + coef(lmCatSwitch_V2)[[1]]
# Trails Switching
lmTrails = lm(TRL4TLOG ~ TRL2TLOG + TRL3TLOG, data=allData, na.action=na.exclude)
allData[["TRL4TLOGADJ"]] = residuals(lmTrails) + coef(lmTrails)[[1]]
lmTrails_V2 = lm(TRL4TLOG_V2 ~ TRL2TLOG_V2 + TRL3TLOG_V2, data=allData, na.action=na.exclude)
allData[["TRL4TLOGADJ_V2"]] = residuals(lmTrails_V2) + coef(lmTrails_V2)[[1]]
# Create list of raw variable names to adjust
rawVarsV1 = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL4TLOGADJ","TRL5TLOG","CSSACC","CSSACCADJ","MTXRAW","CVA1RAW","CVATOT","CVSDFR","CVLDFR",
"AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN",
"AFQTBXPCTTRAN","DSFRAW","DSBRAW","DSFMAX","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","STRCWADJ","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR","CSCOR","SRTLMEANLOG",
"SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG","CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG",
"CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT","AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE",
"BXMISSRATE","CPTDPRIME")
rawVarsV2 = paste0(rawVarsV1, "_V2")
# Print variable names and verify these are correct
rawVarsV1
rawVarsV2
#----------------------------------------------------------------------------#
#                     Define functions                                       #
#----------------------------------------------------------------------------#
adjustDataset = function(regVars,adjVars,nDemoVars=7,suffix="adj",data){
#######################################################################
# Adjust dataset for specified set of variables.Regresses passed      #
# variables from each measure using linear regression. The intercept  #
# is added back in to retain mean level information.                  #
# Input:                                                              #
# regVars = List of variables to regress out                          #
# adjVars = List of variables to be adjusted                          #
# nDemoVars = Number of demographic variables included in dataframe.  #
#             These should be the first 1:nDemoVars columns of        #
#             the dataframe                                           #
#######################################################################
# Read variable names from data and store in a vector
allNames <- names(data)
#*** Check variables are correct
nVars <- length(adjVars)
### Creating Storate Data Frame ###
# Set number of individuals
n <- dim(data)[1]
tot <- dim(data)[2]
# Create Data Frame
data <- cbind(data,matrix(NA,nrow=n,ncol=nVars))
names(data) <- c(allNames,paste(adjVars,suffix,sep="_"))
### Running Loop Using lapply ###
# fitting models
models <- lapply(adjVars, function(x) {
fmla = as.formula(paste0(x," ~ ",regVars))
lm(formula=fmla, data = data, na.action=na.exclude)
})
# storing residuals from each model into data frame
for(v in 1:nVars){
data[,tot+v] <- residuals(models[[v]]) + coef(models[[v]])[[1]]
}
#dataR is now your residualized parameters
dataR <- data[,c(1:nDemoVars,(tot+1):(tot+nVars))]
dataR
}
addScaleVals = function(df,varname, x) {
###########################################################
# Save mean and SD of all variables into a dataframe      #
# Input:                                                  #
# df = Initialized dataframe to hold results              #
# varname = String name of variable                       #
# x = Scaled vector of data                               #
###########################################################
meanVal = attr(x, which="scaled:center")
sdVal = attr(x, which="scaled:scale")
rbind(df, data.frame(Variable=varname, Mean=meanVal, SD=sdVal))
}
##########################################
### Begin creating unadjusted datasets ###
##########################################
#-----------------------------------------------------------------------------------#
# Create unadjusted dataset on raw score scale                                      #
#                                                                                   #
# Intercept is added back in to avoid mean centering.                               #
#-----------------------------------------------------------------------------------#
### Save out unadjusted scores on raw score scale ###
write.csv(allData,
"~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_Unadj.csv",
row.names = FALSE)
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for nas201tran (Age 20 AFQT) and standardized.            #
#                                                                                   #
# Dataset with NAS201TRAN (age 20 AFQT) regressed out is standardized (z-scored)    #
# based on VETSA 2 means and sd.                                                    #
#-----------------------------------------------------------------------------------#
# Initialize dataframe to hold means and SDs
scaleValues = data.frame()
allDataZscores = allData
# Scale VETSA 1 variables
# Adds mean and SD to dataframe and deletes adjusted raw variables from dataset
for(i in rawVarsV1){
varname = i
zvarname = paste(i, "z", sep="_")
allDataZscores[[zvarname]] = scale(allDataZscores[[varname]])
scaleValues = addScaleVals(scaleValues, varname, allDataZscores[[zvarname]])
allDataZscores[[varname]] = NULL
}
# Scale VETSA 2 variables using VETSA 1 mean and SD
# Delete adjusted raw variable from dataset
for(i in rawVarsV2){
varnameV2 = i
zvarname = paste(i, "z", sep="_")
varnameV1 = gsub("_V2","",varnameV2)
allDataZscores[[zvarname]] = scale(allDataZscores[[varnameV2]],
center=scaleValues$Mean[scaleValues$Variable==varnameV1],
scale=scaleValues$SD[scaleValues$Variable==varnameV1])
allDataZscores[[varnameV2]] = NULL
}
# Save out unadjusted and z-scored dataset
write.csv(allDataZscores,
"~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_Unadj_Z.csv",
row.names = FALSE)
# Save out means and standard deviations used to standardize scores
write.csv(scaleValues, "~/netshare/K/Projects/PracticeEffects/data/V1_Unadj_Means_SDs.csv",
row.names = FALSE)
########################################
### Begin creating adjusted datasets ###
########################################
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for nas201tran (Age 20 AFQT)                              #
#                                                                                   #
# Adjustment consists of regressing out nuisance variable from raw variables.       #
# Intercept is added back in to avoid mean centering.                               #
#-----------------------------------------------------------------------------------#
# Adjust raw scores from VETSA 1 and VETSA 2
adjVars = c(rawVarsV1, rawVarsV2)
### Set number of demographic variables included in dataframe (these won't be adjusted) ###
nDemoVars = 7
# Filter out subjects missing variable to be regressed out
data = subset(allData, !is.na(allData$NAS201TRAN))
# Specify nas201tran (Age 20 AFQT as variable to regress out)
regVars = paste("scale(NAS201TRAN)", sep=" + ")
# Regress nas201tran out of dataset
nasAdjRawScoresData = adjustDataset(regVars, adjVars, nDemoVars, "nas", data)
# Save out dataset with Age 20 AFQT regressed out
write.csv(nasAdjRawScoresData, "~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_NASAdj.csv",
row.names=F)
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for nas201tran (Age 20 AFQT) and standardized.            #
#                                                                                   #
# Dataset with NAS201TRAN (age 20 AFQT) regressed out is standardized (z-scored)    #
# based on VETSA 2 means and sd.                                                    #
#-----------------------------------------------------------------------------------#
# Initialize dataframe to hold means and SDs
scaleValues = data.frame()
nasAdjZscoresData = nasAdjRawScoresData
# Scale VETSA 1 variables that have been adjusted for nas201tran
# Adds mean and SD to dataframe and deletes adjusted raw variables from dataset
for(i in rawVarsV1){
varname = paste0(i, "_nas")
zvarname = gsub("_nas","_znas",varname)
nasAdjZscoresData[[zvarname]] = scale(nasAdjZscoresData[[varname]])
scaleValues = addScaleVals(scaleValues, varname, nasAdjZscoresData[[zvarname]])
nasAdjZscoresData[[varname]] = NULL
}
# Scale VETSA 2 variables that have been adjusted for nas201tran using VETSA 1 mean and SD
# Delete adjusted raw variable from dataset
for(i in rawVarsV2){
varnameV2 = paste0(i, "_nas")
zvarname = gsub("_nas","_znas",varnameV2)
varnameV1 = gsub("_V2","",varnameV2)
nasAdjZscoresData[[zvarname]] = scale(nasAdjZscoresData[[varnameV2]],
center=scaleValues$Mean[scaleValues$Variable==varnameV1],
scale=scaleValues$SD[scaleValues$Variable==varnameV1])
nasAdjZscoresData[[varnameV2]] = NULL
}
# Save out adjusted and z-scored dataset
write.csv(nasAdjZscoresData,
"~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_NASAdj_Z.csv",
row.names = FALSE)
# Save out means and standard deviations used to standardize scores
write.csv(scaleValues, "~/netshare/K/Projects/PracticeEffects/data/V1_NASAdj_Means_SDs.csv",
row.names = FALSE)
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for TEDALL (Education)                                    #
#                                                                                   #
# Adjustment consists of regressing out nuisance variable from raw variables.       #
# Intercept is added back in to avoid mean centering.                               #
#-----------------------------------------------------------------------------------#
# Adjust raw scores from VETSA 1 and VETSA 2
adjVars = c(rawVarsV1, rawVarsV2)
### Set number of demographic variables included in dataframe (these won't be adjusted) ###
nDemoVars = 7
# Filter out subjects missing variable to be regressed out
data = subset(allData, !is.na(allData$TEDALL))
# Specify nas201tran (Age 20 AFQT as variable to regress out)
regVars = paste("scale(TEDALL)", sep=" + ")
# Regress nas201tran out of dataset
tedAdjRawScoresData = adjustDataset(regVars, adjVars, nDemoVars, "ted", data)
# Save out dataset with Education regressed out
write.csv(tedAdjRawScoresData, "~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_TEDALLAdj.csv",
row.names=F)
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for TEDALL (Education) and standardized.                  #
#                                                                                   #
# Dataset with TEDALL (Education) regressed out is standardized (z-scored)          #
# based on VETSA 2 means and sd.                                                    #
#-----------------------------------------------------------------------------------#
# Initialize dataframe to hold means and SDs
scaleValues = data.frame()
tedAdjZscoresData = tedAdjRawScoresData
# Scale VETSA 1 variables that have been adjusted for TEDALL
# Adds mean and SD to dataframe and deletes adjusted raw variables from dataset
for(i in rawVarsV1){
varname = paste0(i, "_ted")
zvarname = gsub("_ted","_zted",varname)
tedAdjZscoresData[[zvarname]] = scale(tedAdjZscoresData[[varname]])
scaleValues = addScaleVals(scaleValues, varname, tedAdjZscoresData[[zvarname]])
tedAdjZscoresData[[varname]] = NULL
}
# Scale VETSA 2 variables that have been adjusted for TEDALL using VETSA 1 mean and SD
# Delete adjusted raw variable from dataset
for(i in rawVarsV2){
varnameV2 = paste0(i, "_ted")
zvarname = gsub("_ted","_zted",varnameV2)
varnameV1 = gsub("_V2","",varnameV2)
tedAdjZscoresData[[zvarname]] = scale(tedAdjZscoresData[[varnameV2]],
center=scaleValues$Mean[scaleValues$Variable==varnameV1],
scale=scaleValues$SD[scaleValues$Variable==varnameV1])
tedAdjZscoresData[[varnameV2]] = NULL
}
# Save out adjusted and z-scored dataset
write.csv(tedAdjZscoresData,
"~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_TEDALLAdj_Z.csv",
row.names = FALSE)
# Save out means and standard deviations used to standardize scores
write.csv(scaleValues, "~/netshare/K/Projects/PracticeEffects/data/V1_TEDALLAdj_Means_SDs.csv",
row.names = FALSE)
allDat = read.csv("~/netshare/K/Projects/PracticeEffects/data/testing/V1V2_CogData_NASAdj_Z.csv")
subsetDat = allDat %>%
filter(VETSAGRP=="V1V2" | VETSAGRP=="V1" | VETSAGRP=="V2AR")
V1neDat = allDat %>% filter(VETSAGRP=="v1ne")
testVars = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL5TLOG","TRL4TLOGADJ","CSSACC","CSSACCADJ","MTXRAW","CVA1RAW",
"CVATOT","CVSDFR","CVLDFR","AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT",
"AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN","AFQTBXPCTTRAN","DSFRAW",
"DSBRAW","DSFMAX","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","STRCWADJ","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR",
"CSCOR","SRTLMEANLOG","SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG",
"CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG","CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT",
"AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE","BXMISSRATE","CPTDPRIME")
cogVars = c("VisSpat","STWKMem","EpsMem","AbsReason","VerbFlu",
"ProcSpeed","Executive")
allVars = c(testVars, cogVars)
afqtVars = c("AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN",
"AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN","AFQTBXPCTTRAN")
idxS1T2 = which(subsetDat$VETSAGRP=="V1V2")
idxS1T1ret = which(subsetDat$VETSAGRP=="V1V2")
idxS2T2 = which(subsetDat$VETSAGRP=="V2AR")
calcPracticeEffect = function(dat, varName, idxS1T2, idxS2T2,idxS1T1ret){
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_znas")
varV2 = paste0(varV2,"_znas")
# Longitudinal Subjects Time 2
S1T2 = mean(dat[idxS1T2, varV2], na.rm=T)
# Attrition Replacement Subjects Time 2
S2T2 = mean(dat[idxS2T2, varV2], na.rm=T)
# Longitudinal Returnees Time 1
S1T1ret = mean(dat[idxS1T1ret, varV1], na.rm=T)
# All Subjects Time 1
S1T1all = mean(dat[, varV1], na.rm=T)
# Difference score
D = S1T2 - S2T2
# Attrition effect
A = S1T1ret - S1T1all
# Practice Effect
P = D - A
P
}
calcCogDomains = function(testdat){
testdat[['VisSpat']] = mean(testdat[c("MR1COR","HFTOTCOR")])
testdat[['STWKMem']] = mean(testdat[c("DSFRAW","DSBRAW","LNTOT","SSPFRAW",
"SSPBRAW","RSATOT")])
testdat[['EpsMem']] = mean(testdat[c("CVATOT","CVSDFR","CVLDFR","LMITOT",
"LMDTOT","VRITOT","VRDTOT")])
testdat[['AbsReason']] = testdat['MTXRAW']
testdat[['VerbFlu']] = mean(testdat[c("LFCOR","CFCOR")])
testdat[['ProcSpeed']] =mean(c(testdat[c("STRWRAW","STRCRAW")],(-1 *testdat[c("TRL2TLOG","TRL3TLOG")]))) # Flip sign of RT measures
testdat[['Executive']] = mean(c(testdat[c('STRCWADJ','CSSACCADJ')], (testdat['TRL4TLOGADJ'] * -1))) # Flip sign of RT measures
testdat
}
pracEffects = sapply(testVars, function(x) calcPracticeEffect(subsetDat, x, idxS1T2,
idxS2T2, idxS1T1ret))
subsetDat
testVars
subsetDat$CSSACC_V2_znas
idxS1T1ret
idxS2T2
idxS1T1ret
dat = subsetDat
varName = testVars[1]
varName
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_znas")
varV2 = paste0(varV2,"_znas")
S1T2 = mean(dat[idxS1T2, varV2], na.rm=T)
S2T2 = mean(dat[idxS2T2, varV2], na.rm=T)
S1T1ret = mean(dat[idxS1T1ret, varV1], na.rm=T)
S1T1all = mean(dat[, varV1], na.rm=T)
D = S1T2 - S2T2
A = S1T1ret - S1T1all
P = D - A
P
pracEffects = sapply(testVars, function(x) calcPracticeEffect(subsetDat, x, idxS1T2,
idxS2T2, idxS1T1ret))
str(subsetDat)
calcPracticeEffect = function(dat, varName, idxS1T2, idxS2T2,idxS1T1ret){
print varName
calcPracticeEffect = function(dat, varName, idxS1T2, idxS2T2,idxS1T1ret){
print(varName)
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_znas")
varV2 = paste0(varV2,"_znas")
# Longitudinal Subjects Time 2
S1T2 = mean(dat[idxS1T2, varV2], na.rm=T)
# Attrition Replacement Subjects Time 2
S2T2 = mean(dat[idxS2T2, varV2], na.rm=T)
# Longitudinal Returnees Time 1
S1T1ret = mean(dat[idxS1T1ret, varV1], na.rm=T)
# All Subjects Time 1
S1T1all = mean(dat[, varV1], na.rm=T)
# Difference score
D = S1T2 - S2T2
# Attrition effect
A = S1T1ret - S1T1all
# Practice Effect
P = D - A
P
}
pracEffects = sapply(testVars, function(x) calcPracticeEffect(subsetDat, x, idxS1T2,
idxS2T2, idxS1T1ret))
varName
varName = "CSSACCADJ"
print(varName)
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_znas")
varV2 = paste0(varV2,"_znas")
S1T2 = mean(dat[idxS1T2, varV2], na.rm=T)
mean(dat[idxS1T2, varV2], na.rm=T)
dat[idxS1T2, varV2]
dat[, varV2]
varV2
dat$CSSACC_V2_znas
dat[[varV2]]
varVs
varV2
dat[["varV2"CSSACCADJ_V2_znas]]
dat[["CSSACCADJ_V2_znas"]]
allDat = read.csv("~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_NASAdj_Z.csv")
# Load data
allDat = read.csv("~/netshare/K/Projects/PracticeEffects/data/V1V2_CogData_NASAdj_Z.csv")
# Select subjects from groups of interest
subsetDat = allDat %>%
filter(VETSAGRP=="V1V2" | VETSAGRP=="V1" | VETSAGRP=="V2AR")
# Take out V1ne subject in order to add back in later
V1neDat = allDat %>% filter(VETSAGRP=="v1ne")
# Create vector of all variable names to calculate practice effects for
testVars = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL5TLOG","TRL4TLOGADJ","CSSACC","CSSACCADJ","MTXRAW","CVA1RAW",
"CVATOT","CVSDFR","CVLDFR","AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT",
"AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN","AFQTBXPCTTRAN","DSFRAW",
"DSBRAW","DSFMAX","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","STRCWADJ","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR",
"CSCOR","SRTLMEANLOG","SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG",
"CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG","CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT",
"AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE","BXMISSRATE","CPTDPRIME")
# Create list of cognitive domains to present separately
cogVars = c("VisSpat","STWKMem","EpsMem","AbsReason","VerbFlu",
"ProcSpeed","Executive")
# Create list of test variables and cognitive domains
allVars = c(testVars, cogVars)
#Create list of AFQT scores to present separately
afqtVars = c("AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN",
"AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN","AFQTBXPCTTRAN")
# Create indices of different groups
idxS1T2 = which(subsetDat$VETSAGRP=="V1V2")
idxS1T1ret = which(subsetDat$VETSAGRP=="V1V2")
idxS2T2 = which(subsetDat$VETSAGRP=="V2AR")
# Define function to calculate practice effects as specified above.
calcPracticeEffect = function(dat, varName, idxS1T2, idxS2T2,idxS1T1ret){
print(varName)
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_znas")
varV2 = paste0(varV2,"_znas")
# Longitudinal Subjects Time 2
S1T2 = mean(dat[idxS1T2, varV2], na.rm=T)
# Attrition Replacement Subjects Time 2
S2T2 = mean(dat[idxS2T2, varV2], na.rm=T)
# Longitudinal Returnees Time 1
S1T1ret = mean(dat[idxS1T1ret, varV1], na.rm=T)
# All Subjects Time 1
S1T1all = mean(dat[, varV1], na.rm=T)
# Difference score
D = S1T2 - S2T2
# Attrition effect
A = S1T1ret - S1T1all
# Practice Effect
P = D - A
P
}
# Define function to create composite cognitive domains. Take absolute value to account for domains that
# incorporate practice effects with different signs (i.e., # correct and reaction time).
calcCogDomains = function(testdat){
testdat[['VisSpat']] = mean(testdat[c("MR1COR","HFTOTCOR")])
testdat[['STWKMem']] = mean(testdat[c("DSFRAW","DSBRAW","LNTOT","SSPFRAW",
"SSPBRAW","RSATOT")])
testdat[['EpsMem']] = mean(testdat[c("CVATOT","CVSDFR","CVLDFR","LMITOT",
"LMDTOT","VRITOT","VRDTOT")])
testdat[['AbsReason']] = testdat['MTXRAW']
testdat[['VerbFlu']] = mean(testdat[c("LFCOR","CFCOR")])
testdat[['ProcSpeed']] =mean(c(testdat[c("STRWRAW","STRCRAW")],(-1 *testdat[c("TRL2TLOG","TRL3TLOG")]))) # Flip sign of RT measures
testdat[['Executive']] = mean(c(testdat[c('STRCWADJ','CSSACCADJ')], (testdat['TRL4TLOGADJ'] * -1))) # Flip sign of RT measures
testdat
}
calcPracticeEffect = function(dat, varName, idxS1T2, idxS2T2,idxS1T1ret){
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_znas")
varV2 = paste0(varV2,"_znas")
# Longitudinal Subjects Time 2
S1T2 = mean(dat[idxS1T2, varV2], na.rm=T)
# Attrition Replacement Subjects Time 2
S2T2 = mean(dat[idxS2T2, varV2], na.rm=T)
# Longitudinal Returnees Time 1
S1T1ret = mean(dat[idxS1T1ret, varV1], na.rm=T)
# All Subjects Time 1
S1T1all = mean(dat[, varV1], na.rm=T)
# Difference score
D = S1T2 - S2T2
# Attrition effect
A = S1T1ret - S1T1all
# Practice Effect
P = D - A
P
}
pracEffects = sapply(testVars, function(x) calcPracticeEffect(subsetDat, x, idxS1T2,
idxS2T2, idxS1T1ret))
pracEffects = calcCogDomains(pracEffects)
### Run permutation testing to generate p-values for practice effects ###
set.seed(21)
# Set parameters for permutation testing of practice effects
N = nrow(subsetDat)                # Numer of subjects
nPerm = 10000                      # Number of permutations to run
nLong = length(idxS1T1ret)         # Number of longitudinal subjects
nAR = length(idxS2T2)              # Number of attrition replacement subjects
# Get indices of different groups
idxV1V2 = which(subsetDat$VETSAGRP=="V1V2")
idxV2AR = which(subsetDat$VETSAGRP=="V2AR")
idxV1 = which(subsetDat$VETSAGRP=="V1")
# Initialize empty matrix for permutation results
permResults = matrix(ncol=length(allVars), nrow=nPerm)
colnames(permResults) = allVars
# Run permutations and collect results into matrix
for(i in 1:nPerm){
idxT2 = sample(c(idxV1V2, idxV2AR))
idxT1 = sample(c(idxV1V2, idxV1))
idxS1T2perm = idxT2[1:nLong]
idxS2T2perm = idxT2[(nLong+1):(nLong+nAR)]
idxS1T1retperm = idxT1[1:nLong]
tmpResults = sapply(testVars, function(x) calcPracticeEffect(subsetDat, x,
idxS1T2perm,
idxS2T2perm,
idxS1T1retperm))
permResults[i,] = calcCogDomains(tmpResults)
}
